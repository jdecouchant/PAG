//
// Generated file, do not edit! Created by opp_msgc 4.2 from RRBmsg.msg.
//

#ifndef _RRBMSG_M_H_
#define _RRBMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPvXAddress.h"
#include "Util.h"
// }}



/**
 * Class generated from <tt>RRBmsg.msg</tt> by opp_msgc.
 * <pre>
 * packet RRBmsg {
 *     Node origine;
 *     Node src;
 *     int RRBmsg_id;
 *     simtime_t sendTime;
 *     simtime_t recepTime;
 *     int hopCount=0;
 * }
 * </pre>
 */
class RRBmsg : public ::cPacket
{
  protected:
    Node origine_var;
    Node src_var;
    int RRBmsg_id_var;
    simtime_t sendTime_var;
    simtime_t recepTime_var;
    int hopCount_var;

  private:
    void copy(const RRBmsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RRBmsg&);

  public:
    RRBmsg(const char *name=NULL, int kind=0);
    RRBmsg(const RRBmsg& other);
    virtual ~RRBmsg();
    RRBmsg& operator=(const RRBmsg& other);
    virtual RRBmsg *dup() const {return new RRBmsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual Node& getOrigine();
    virtual const Node& getOrigine() const {return const_cast<RRBmsg*>(this)->getOrigine();}
    virtual void setOrigine(const Node& origine);
    virtual Node& getSrc();
    virtual const Node& getSrc() const {return const_cast<RRBmsg*>(this)->getSrc();}
    virtual void setSrc(const Node& src);
    virtual int getRRBmsg_id() const;
    virtual void setRRBmsg_id(int RRBmsg_id);
    virtual simtime_t getSendTime() const;
    virtual void setSendTime(simtime_t sendTime);
    virtual simtime_t getRecepTime() const;
    virtual void setRecepTime(simtime_t recepTime);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
};

inline void doPacking(cCommBuffer *b, RRBmsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RRBmsg& obj) {obj.parsimUnpack(b);}


#endif // _RRBMSG_M_H_
