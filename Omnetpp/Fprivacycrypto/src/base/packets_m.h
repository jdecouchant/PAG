//
// Generated file, do not edit! Created by opp_msgc 4.2 from base/packets.msg.
//

#ifndef _PACKETS_M_H_
#define _PACKETS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "base.h"
// }}



/**
 * Class generated from <tt>base/packets.msg</tt> by opp_msgc.
 * <pre>
 * packet HistoryPacket {
 *  		int8_t msgType;
 *  		int senderId;
 *  		int receiverId;
 *  		
 *  		
 *  		int updatesId[]; 
 *  		
 *  		
 * }
 * </pre>
 */
class HistoryPacket : public ::cPacket
{
  protected:
    int8_t msgType_var;
    int senderId_var;
    int receiverId_var;
    int *updatesId_var; // array ptr
    unsigned int updatesId_arraysize;

  private:
    void copy(const HistoryPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HistoryPacket&);

  public:
    HistoryPacket(const char *name=NULL, int kind=0);
    HistoryPacket(const HistoryPacket& other);
    virtual ~HistoryPacket();
    HistoryPacket& operator=(const HistoryPacket& other);
    virtual HistoryPacket *dup() const {return new HistoryPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int8_t getMsgType() const;
    virtual void setMsgType(int8_t msgType);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual int getReceiverId() const;
    virtual void setReceiverId(int receiverId);
    virtual void setUpdatesIdArraySize(unsigned int size);
    virtual unsigned int getUpdatesIdArraySize() const;
    virtual int getUpdatesId(unsigned int k) const;
    virtual void setUpdatesId(unsigned int k, int updatesId);
};

inline void doPacking(cCommBuffer *b, HistoryPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, HistoryPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>base/packets.msg</tt> by opp_msgc.
 * <pre>
 * packet BriefPacket {
 *  		int8_t msgType;
 *  		int senderId;
 *  		
 *  		
 *  		int updatesId[]; 
 *  		
 *  		
 * }
 * </pre>
 */
class BriefPacket : public ::cPacket
{
  protected:
    int8_t msgType_var;
    int senderId_var;
    int *updatesId_var; // array ptr
    unsigned int updatesId_arraysize;

  private:
    void copy(const BriefPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BriefPacket&);

  public:
    BriefPacket(const char *name=NULL, int kind=0);
    BriefPacket(const BriefPacket& other);
    virtual ~BriefPacket();
    BriefPacket& operator=(const BriefPacket& other);
    virtual BriefPacket *dup() const {return new BriefPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int8_t getMsgType() const;
    virtual void setMsgType(int8_t msgType);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
    virtual void setUpdatesIdArraySize(unsigned int size);
    virtual unsigned int getUpdatesIdArraySize() const;
    virtual int getUpdatesId(unsigned int k) const;
    virtual void setUpdatesId(unsigned int k, int updatesId);
};

inline void doPacking(cCommBuffer *b, BriefPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BriefPacket& obj) {obj.parsimUnpack(b);}


#endif // _PACKETS_M_H_
